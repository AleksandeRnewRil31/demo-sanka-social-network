{"version":3,"file":"static/js/243.e6b77143.chunk.js","mappings":"4MACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,WAAa,6B,SCatN,EAVmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,iBAAKC,UAAWC,EAAAA,WAAe,IAAMA,EAAAA,OAArC,WACQ,gBAAKC,IAAI,gGACb,SAAC,KAAD,CAASC,GAAIL,EAAb,SAAoBD,EAAMO,WCAtC,EANgB,SAACP,GACb,OACI,gBAAKG,UAAWC,EAAAA,OAAhB,SAA2BJ,EAAMQ,W,UCwCzC,SAASC,EAAeT,GACpB,OACI,0BACI,SAAC,KAAD,CACIU,cAAe,CACXC,eAAgB,IAEpBC,gBAAc,EACdC,SAAUb,EAAMc,cALpB,SAUK,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,aAAcC,EAA1C,EAA0CA,WAAYC,EAAtD,EAAsDA,QAASC,EAA/D,EAA+DA,aAAcC,EAA7E,EAA6EA,MAA7E,OACG,4BACI,qBAAUC,YAAa,qBACnBhB,KAAM,iBACNiB,KAAM,OACNC,SAAUP,EACVQ,MAAOX,EAAOJ,eACdgB,OAAQR,IACXF,EAAQN,gBAAkBK,EAAOL,iBAAkB,uBAAIK,EAAOL,kBAC/D,0BAEI,mBACIJ,KAAM,SACNiB,KAAM,SACNI,UAAWR,IAAYE,EACvBO,QAASR,EAJb,4BAiB5B,MA/EgB,SAACrB,GAEb,IAAI8B,EAAQ9B,EAAM+B,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAY5B,KAAM4B,EAAE5B,KAAML,GAAIiC,EAAEjC,IAASiC,EAAEjC,OACpFkC,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAS9B,QAAS8B,EAAE9B,SAAc8B,EAAEpC,OAC9D4B,EAAMnB,eAiB3B,OAAKX,EAAMuC,QAGP,iBAAKpC,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACK4B,KAEL,gBAAK7B,UAAWC,EAAAA,SAAhB,UACI,yBAAMgC,OAEV,SAAC3B,EAAD,CAAgBE,eAAgBX,EAAMW,eAAgBG,cAd1C,SAACC,GACjBf,EAAMwC,YAAYzB,EAAOJ,uBAGH,SAAC,KAAD,CAAUL,GAAI,Y,2DC1BxCmC,EAA6B,SAACX,GAAD,MAAY,CACzCS,OAAQT,EAAMY,KAAKH,SCkBvB,GAAeI,E,QAAAA,KACXC,EAAAA,EAAAA,KAjBkB,SAACd,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAGF,SAACc,GACtB,MAAO,CACHL,YAAa,SAAC7B,GACVkC,GAASC,EAAAA,EAAAA,IAAmBnC,KAEhCoC,qBAAsB,SAACC,GACnBH,GAASI,EAAAA,EAAAA,IAA4BD,UDVjB,SAACE,GAAe,IACtCC,EADqC,0IAEvC,WACI,OAAKC,KAAKpD,MAAMuC,QAET,SAACW,GAAD,UAAeE,KAAKpD,SAFI,SAAC,KAAD,CAAUM,GAAG,eAHT,GACX+C,EAAAA,WAUhC,OAFoCT,EAAAA,EAAAA,IAAQH,EAARG,CAAoCO,KCM5E,CAGEG","sources":["webpack://first-project/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__zdWsu\",\"dialogsItems\":\"Dialogs_dialogsItems__USZJk\",\"active\":\"Dialogs_active__TxIwr\",\"messages\":\"Dialogs_messages__56eL4\",\"message\":\"Dialogs_message__Z-8bl\",\"dialogItem\":\"Dialogs_dialogItem__Fx6wV\"};","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from \"./../Dialogs.module.css\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.dialogItem + \" \" + s.active}>\r\n                <img src=\"https://shapka-youtube.ru/wp-content/uploads/2021/02/prikolnaya-avatarka-dlya-patsanov.jpg\"></img>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.dialog}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport Message from \"./Message/Message\";\r\nimport { Formik } from \"formik\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} id={d.id} key={d.id} />);\r\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id} />);\r\n    let newMessageBody = state.newMessageBody;\r\n\r\n    // let newDialogElement = React.createRef();\r\n\r\n    // let onSendMessageClick = () => {\r\n    //     props.sendMessage();\r\n    // }\r\n\r\n    // let onNewMessageChange = (e) => {\r\n    //     let body = e.target.value;\r\n    //     props.updateNewMessageBody(body);\r\n    // }\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={\"/login\"} />;\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <AddMessageForm newMessageBody={props.newMessageBody} addNewMessage= {addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction AddMessageForm(props) {\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{\r\n                    newMessageBody: \"\"\r\n                }}\r\n                validateOnBlur\r\n                onSubmit={props.addNewMessage} \r\n                \r\n            // validationSchema={validationsSchema}\r\n            >\r\n\r\n                {({ values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty }) => (\r\n                    <div>\r\n                        <textarea placeholder={\"Enter your message\"}\r\n                            name={\"newMessageBody\"}\r\n                            type={\"text\"}\r\n                            onChange={handleChange}\r\n                            value={values.newMessageBody}\r\n                            onBlur={handleBlur} />\r\n                        {touched.newMessageBody && errors.newMessageBody && <p>{errors.newMessageBody}</p>}\r\n                        <div>\r\n\r\n                            <button\r\n                                name={\"submit\"}\r\n                                type={\"submit\"}\r\n                                disabled={!isValid && !dirty}\r\n                                onClick={handleSubmit}\r\n                            >Send</button>\r\n                        </div>\r\n                    </div>\r\n                )\r\n                }\r\n            </Formik>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to=\"/login\" />\r\n\r\n            return <Component {...this.props}/>\r\n        }z\r\n    }\r\n    \r\n   let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from \"react\";\r\nimport { sendMessageCreator, updateNewMessageBodyCreator } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        },\r\n        updateNewMessageBody: (body) => {\r\n            dispatch(updateNewMessageBodyCreator(body));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"names":["props","path","id","className","s","src","to","name","message","AddMessageForm","initialValues","newMessageBody","validateOnBlur","onSubmit","addNewMessage","values","errors","touched","handleChange","handleBlur","isValid","handleSubmit","dirty","placeholder","type","onChange","value","onBlur","disabled","onClick","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","isAuth","sendMessage","mapStateToPropsForRedirect","auth","compose","connect","dispatch","sendMessageCreator","updateNewMessageBody","body","updateNewMessageBodyCreator","Component","RedirectComponent","this","React","Dialogs"],"sourceRoot":""}